"""
Data export views for Summerfest registration system
Provides CSV/Excel exports for admin users
"""

import csv
from datetime import datetime
from django.http import HttpResponse
from django.contrib.admin.views.decorators import staff_member_required
from django.shortcuts import render
from django.db.models import Q
from .models import ParentProfile, Child, Attendance, PaymentAccount, PaymentTransaction, DailyAttendanceCharge


@staff_member_required
def export_dashboard(request):
    """Dashboard for data export options"""
    stats = {
        'total_families': ParentProfile.objects.count(),
        'total_children': Child.objects.count(),
        'total_attendance_records': Attendance.objects.count(),
        'total_payment_accounts': PaymentAccount.objects.count(),
        'total_transactions': PaymentTransaction.objects.count(),
    }
    return render(request, 'admin/export_dashboard.html', {'stats': stats})


@staff_member_required
def export_families_csv(request):
    """Export all families and parent data to CSV"""
    response = HttpResponse(content_type='text/csv')
    response['Content-Disposition'] = f'attachment; filename="summerfest_families_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv"'
    
    writer = csv.writer(response)
    
    # Write header
    writer.writerow([
        'Family ID',
        'Username',
        'First Name',
        'Last Name', 
        'Street Address',
        'City',
        'Postcode',
        'Email',
        'Phone Number',
        'How Heard About',
        'Additional Information',
        'Attends Church Regularly',
        'Which Church',
        'Emergency Contact Name',
        'Emergency Contact Phone',
        'Emergency Contact Relationship',
        'First Aid Consent',
        'Injury Waiver',
        'Registration Date',
        'Number of Children',
        'Account Balance',
        'Total Paid',
        'Weekly Charge (Child Rate)',
        'Weekly Charge (Family Rate)'
    ])\n    \n    # Write data\n    for parent in ParentProfile.objects.select_related('user', 'payment_account').all():\n        payment_account = getattr(parent, 'payment_account', None)\n        total_paid = 0\n        if payment_account:\n            credit_transactions = payment_account.transactions.filter(transaction_type='credit')\n            total_paid = sum(t.amount for t in credit_transactions)\n        \n        writer.writerow([\n            parent.id,\n            parent.user.username,\n            parent.first_name,\n            parent.last_name,\n            parent.street_address,\n            parent.city,\n            parent.postcode,\n            parent.email,\n            parent.phone_number,\n            parent.get_how_heard_about_display(),\n            parent.additional_information,\n            'Yes' if parent.attends_church_regularly else 'No',\n            parent.which_church,\n            parent.emergency_contact_name,\n            parent.emergency_contact_phone,\n            parent.get_emergency_contact_relationship_display(),\n            'Yes' if parent.first_aid_consent else 'No',\n            'Yes' if parent.injury_waiver else 'No',\n            parent.created_at.strftime('%Y-%m-%d %H:%M'),\n            parent.children.count(),\n            payment_account.balance if payment_account else '0.00',\n            total_paid,\n            payment_account.weekly_charge_child if payment_account else '0.00',\n            payment_account.weekly_charge_family if payment_account else '0.00'\n        ])\n    \n    return response\n\n\n@staff_member_required\ndef export_children_csv(request):\n    \"\"\"Export all children data to CSV\"\"\"\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = f'attachment; filename=\"summerfest_children_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.csv\"'\n    \n    writer = csv.writer(response)\n    \n    # Write header\n    writer.writerow([\n        'Child ID',\n        'Parent Username',\n        'Parent Name',\n        'Child First Name',\n        'Child Last Name',\n        'Date of Birth',\n        'Age',\n        'Gender',\n        'Class',\n        'Has Dietary Needs',\n        'Dietary Needs Detail',\n        'Has Medical Needs',\n        'Medical Allergy Details',\n        'Photo Consent',\n        'QR Code ID',\n        'Registration Date',\n        'Total Attendance Days',\n        'Last Attendance Date'\n    ])\n    \n    # Write data\n    for child in Child.objects.select_related('parent__user').all():\n        # Calculate age\n        today = datetime.now().date()\n        age = today.year - child.date_of_birth.year - ((today.month, today.day) < (child.date_of_birth.month, child.date_of_birth.day))\n        \n        # Get attendance stats\n        attendance_days = child.attendance_records.values('date').distinct().count()\n        last_attendance = child.attendance_records.order_by('-date').first()\n        \n        writer.writerow([\n            child.id,\n            child.parent.user.username,\n            f\"{child.parent.first_name} {child.parent.last_name}\",\n            child.first_name,\n            child.last_name,\n            child.date_of_birth.strftime('%Y-%m-%d'),\n            age,\n            child.get_gender_display(),\n            child.get_child_class_display(),\n            'Yes' if child.has_dietary_needs else 'No',\n            child.dietary_needs_detail,\n            'Yes' if child.has_medical_needs else 'No',\n            child.medical_allergy_details,\n            'Yes' if child.photo_consent else 'No',\n            str(child.qr_code_id),\n            child.created_at.strftime('%Y-%m-%d %H:%M'),\n            attendance_days,\n            last_attendance.date.strftime('%Y-%m-%d') if last_attendance else 'Never'\n        ])\n    \n    return response\n\n\n@staff_member_required\ndef export_attendance_csv(request):\n    \"\"\"Export all attendance records to CSV\"\"\"\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = f'attachment; filename=\"summerfest_attendance_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.csv\"'\n    \n    writer = csv.writer(response)\n    \n    # Write header\n    writer.writerow([\n        'Attendance ID',\n        'Date',\n        'Child ID',\n        'Child Name',\n        'Child Class',\n        'Parent Name',\n        'Parent Username',\n        'Check In Time',\n        'Check Out Time',\n        'Duration (minutes)',\n        'Checked In By',\n        'Checked Out By',\n        'Notes'\n    ])\n    \n    # Write data\n    for attendance in Attendance.objects.select_related('child__parent__user', 'checked_in_by', 'checked_out_by').all():\n        # Calculate duration\n        duration = ''\n        if attendance.time_out:\n            delta = attendance.time_out - attendance.time_in\n            duration = int(delta.total_seconds() / 60)\n        \n        writer.writerow([\n            attendance.id,\n            attendance.date.strftime('%Y-%m-%d'),\n            attendance.child.id,\n            f\"{attendance.child.first_name} {attendance.child.last_name}\",\n            attendance.child.get_child_class_display(),\n            f\"{attendance.child.parent.first_name} {attendance.child.parent.last_name}\",\n            attendance.child.parent.user.username,\n            attendance.time_in.strftime('%H:%M:%S'),\n            attendance.time_out.strftime('%H:%M:%S') if attendance.time_out else 'Still checked in',\n            duration,\n            attendance.checked_in_by.get_full_name() if attendance.checked_in_by else '',\n            attendance.checked_out_by.get_full_name() if attendance.checked_out_by else '',\n            attendance.notes\n        ])\n    \n    return response\n\n\n@staff_member_required\ndef export_payments_csv(request):\n    \"\"\"Export all payment records to CSV\"\"\"\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = f'attachment; filename=\"summerfest_payments_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.csv\"'\n    \n    writer = csv.writer(response)\n    \n    # Write header\n    writer.writerow([\n        'Transaction ID',\n        'Date/Time',\n        'Parent Username',\n        'Parent Name',\n        'Amount',\n        'Type',\n        'Payment Method',\n        'Description',\n        'Stripe Payment Intent ID',\n        'Recorded By',\n        'Account Balance After'\n    ])\n    \n    # Write data\n    for transaction in PaymentTransaction.objects.select_related('payment_account__parent_profile__user', 'recorded_by').all():\n        writer.writerow([\n            transaction.id,\n            transaction.created_at.strftime('%Y-%m-%d %H:%M:%S'),\n            transaction.payment_account.parent_profile.user.username,\n            f\"{transaction.payment_account.parent_profile.first_name} {transaction.payment_account.parent_profile.last_name}\",\n            transaction.amount,\n            transaction.get_transaction_type_display(),\n            transaction.get_payment_method_display(),\n            transaction.description,\n            transaction.stripe_payment_intent_id or '',\n            transaction.recorded_by.get_full_name() if transaction.recorded_by else 'System',\n            transaction.payment_account.balance  # Current balance, not historical\n        ])\n    \n    return response\n\n\n@staff_member_required\ndef export_daily_charges_csv(request):\n    \"\"\"Export daily attendance charges to CSV\"\"\"\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = f'attachment; filename=\"summerfest_daily_charges_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.csv\"'\n    \n    writer = csv.writer(response)\n    \n    # Write header\n    writer.writerow([\n        'Charge ID',\n        'Date',\n        'Parent Username',\n        'Parent Name',\n        'Children Count',\n        'Children Names',\n        'Calculated Charge',\n        'Actual Charge (After Caps)',\n        'Savings From Caps'\n    ])\n    \n    # Write data\n    for charge in DailyAttendanceCharge.objects.select_related('payment_account__parent_profile__user').prefetch_related('children').all():\n        children_names = ', '.join([f\"{child.first_name} {child.last_name}\" for child in charge.children.all()])\n        savings = charge.calculated_charge - charge.actual_charge\n        \n        writer.writerow([\n            charge.id,\n            charge.date.strftime('%Y-%m-%d'),\n            charge.payment_account.parent_profile.user.username,\n            f\"{charge.payment_account.parent_profile.first_name} {charge.payment_account.parent_profile.last_name}\",\n            charge.children_count,\n            children_names,\n            charge.calculated_charge,\n            charge.actual_charge,\n            savings\n        ])\n    \n    return response\n\n\n@staff_member_required\ndef export_all_data_csv(request):\n    \"\"\"Export comprehensive data report\"\"\"\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = f'attachment; filename=\"summerfest_complete_report_{datetime.now().strftime(\"%Y%m%d_%H%M%S\")}.csv\"'\n    \n    writer = csv.writer(response)\n    \n    # Write header\n    writer.writerow([\n        'Family ID',\n        'Parent Username',\n        'Parent Name',\n        'Email',\n        'Phone',\n        'Address',\n        'Church',\n        'Child ID',\n        'Child Name',\n        'Child DOB',\n        'Child Age',\n        'Child Class',\n        'Dietary Needs',\n        'Medical Needs',\n        'Total Attendance Days',\n        'Account Balance',\n        'Total Paid',\n        'Total Charged'\n    ])\n    \n    # Write comprehensive data\n    for parent in ParentProfile.objects.select_related('user', 'payment_account').prefetch_related('children').all():\n        payment_account = getattr(parent, 'payment_account', None)\n        total_paid = 0\n        total_charged = 0\n        \n        if payment_account:\n            credit_transactions = payment_account.transactions.filter(transaction_type='credit')\n            debit_transactions = payment_account.transactions.filter(transaction_type='debit')\n            total_paid = sum(t.amount for t in credit_transactions)\n            total_charged = sum(abs(t.amount) for t in debit_transactions)\n        \n        children = parent.children.all()\n        if children:\n            for child in children:\n                # Calculate age\n                today = datetime.now().date()\n                age = today.year - child.date_of_birth.year - ((today.month, today.day) < (child.date_of_birth.month, child.date_of_birth.day))\n                \n                # Get attendance count\n                attendance_days = child.attendance_records.values('date').distinct().count()\n                \n                writer.writerow([\n                    parent.id,\n                    parent.user.username,\n                    f\"{parent.first_name} {parent.last_name}\",\n                    parent.email,\n                    parent.phone_number,\n                    f\"{parent.street_address}, {parent.city} {parent.postcode}\",\n                    parent.which_church if parent.attends_church_regularly else 'No church',\n                    child.id,\n                    f\"{child.first_name} {child.last_name}\",\n                    child.date_of_birth.strftime('%Y-%m-%d'),\n                    age,\n                    child.get_child_class_display(),\n                    child.dietary_needs_detail if child.has_dietary_needs else 'None',\n                    child.medical_allergy_details if child.has_medical_needs else 'None',\n                    attendance_days,\n                    payment_account.balance if payment_account else '0.00',\n                    total_paid,\n                    total_charged\n                ])\n        else:\n            # Parent with no children\n            writer.writerow([\n                parent.id,\n                parent.user.username,\n                f\"{parent.first_name} {parent.last_name}\",\n                parent.email,\n                parent.phone_number,\n                f\"{parent.street_address}, {parent.city} {parent.postcode}\",\n                parent.which_church if parent.attends_church_regularly else 'No church',\n                '',\n                'No children registered',\n                '',\n                '',\n                '',\n                '',\n                '',\n                0,\n                payment_account.balance if payment_account else '0.00',\n                total_paid,\n                total_charged\n            ])\n    \n    return response
